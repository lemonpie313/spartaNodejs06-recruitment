// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//enum

enum Role {
  APPLICANT
  RECRUITER
}

enum Status {
  APPLY
  DROP
  INTERVIEW1
  INTERVIEW2
  FINAL_PASS
}

//model
model Users {
  userId    Int      @id @default(autoincrement()) @map("user_id")
  email     String   @unique @map("email")
  name      String   @map("name")
  password  String   @map("password")
  role      Role     @default(APPLICANT) @map("role")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  resume       Resume[]
  resumeLog    ResumeLog[]
  refreshToken RefreshToken?

  @@map("users")
}

model Resume {
  resumeId  Int      @id @default(autoincrement()) @map("resume_id")
  userId    Int      @map("user_id")
  title     String   @map("title")
  content   String   @map("content") @db.Text
  status    Status   @default(APPLY) @map("status")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  users     Users       @relation(fields: [userId], references: [userId], onDelete: Cascade)
  resumeLog ResumeLog[]

  @@map("resume")
}

model ResumeLog {
  resumeLogId    Int      @id @default(autoincrement()) @map("resume_log_id")
  recruiterId    Int      @map("user_id")
  resumeId       Int      @map("resume_id")
  status         Status   @map("status")
  previousStatus Status   @map("previous_status")
  reason         String   @map("reason") @db.Text
  createdAt      DateTime @default(now()) @map("created_at")

  users  Users  @relation(fields: [recruiterId], references: [userId], onDelete: Cascade)
  resume Resume @relation(fields: [resumeId], references: [resumeId], onDelete: Cascade)

  @@map("resume_log")
}

model RefreshToken {
  tokenId   Int      @id @default(autoincrement()) @map("token_id")
  userId    Int      @unique @map("user_id")
  token     String   @map("token") @db.Text
  createdAt DateTime @default(now()) @map("created_at")

  users Users @relation(fields: [userId], references: [userId], onDelete: Cascade)

  @@map("refresh_token")
}
